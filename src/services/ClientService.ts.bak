import { DbResponse, supabase } from '@/lib/supabase';
import { mockClients } from '@/mockData/clients';
import * as clientOperations from '@/services/db-operations/clients';
import * as clientProfileOperations from '@/services/db-operations/clientProfiles';
import * as therapistOperations from '@/services/db-operations/therapists';

// Import client types from db-operations
import { Client as DbClient, ClientInput as DbClientInput } from '@/services/db-operations/clients';

// Extended Client interface to match both our UI needs and the database structure
export interface Client extends DbClient {
  // Add any additional fields needed for UI that aren't in the database model
  user_id?: string; // Making this optional since it might not be in db schema
}

// Use this for creating new clients
export type ClientInput = DbClientInput;

// Import client profile types from db-operations
import { ClientProfile as DbClientProfile, ClientProfileInput as DbClientProfileInput } from '@/services/db-operations/clientProfiles';

// Extended ClientProfile interface to match both our UI needs and the database structure
export interface ClientProfile extends DbClientProfile {
  // Add any additional fields needed for UI that aren't in the database model
  first_name?: string;
  last_name?: string;
  phone_number?: string;
  insurance_provider?: string;
  insurance_id?: string;
  notes?: string;
}

// Use this for creating new client profiles
export type ClientProfileInput = DbClientProfileInput;

// Define ClientWithProfile as its own interface that includes all fields we need
export interface ClientWithProfile {
  id: string;
  first_name: string;
  last_name: string;
  email?: string;
  phone?: string;
  status?: string;
  therapist_id: string;
  created_at?: string;
  updated_at?: string;
  // UI-specific fields
  name?: string;
  session_count?: number;
  last_session_date?: string;
  // Profile data
  profile?: ClientProfile;
}

export class ClientService {
  /**
   * Create a new client with profile
   */
  async createClientWithProfile(client: Partial<Client>, profile?: Partial<ClientProfile>) {
    try {
      console.log('ClientService.createClientWithProfile called with therapist_id:', client.therapist_id);
      
      // Verify we have a therapist_id
      if (!client.therapist_id) {
        console.error('No therapist_id provided for client creation');
        throw new Error('Therapist ID is required to create a client');
      }

      // Prepare client data for insertion
      const clientInput: Partial<DbClientInput> = {
        first_name: client.first_name || '',
        last_name: client.last_name || '',
        email: client.email,
        phone: client.phone,
        status: client.status as any || 'New',
        therapist_id: client.therapist_id
      };

      console.log('Prepared client input:', clientInput);

      // Create the client record - the db-operations layer will handle authentication
      // and ensure the therapist_id matches the authenticated user
      const { data: createdClient, error: clientError } = await clientOperations.createClient(clientInput as DbClientInput);

      if (clientError) {
        console.error('Client creation error:', clientError);
        throw clientError;
      }
      
      if (!createdClient) {
        console.error('No client data returned after creation');
        throw new Error('Failed to create client - no data returned');
      }
      
      console.log('Client created successfully:', createdClient.id);

      // Create profile if provided
      if (profile && createdClient) {
        try {
          // Prepare profile data for insertion
          const profileInput: Partial<DbClientProfileInput> = {
            client_id: createdClient.id,
            date_of_birth: profile.date_of_birth,
            address: profile.address,
            emergency_contact: profile.emergency_contact,
            occupation: profile.occupation,
            therapy_type: profile.therapy_type,
            // Add any other fields from the profile
          };

          // Create the profile record
          const { data: createdProfile, error: profileError } = 
            await clientProfileOperations.createClientProfile(profileInput as DbClientProfileInput);

          if (profileError) {
            console.error('Error creating client profile:', profileError);
            // Continue even without profile creation
          }

          // Return the client with nested profile
          return { 
            data: { 
              ...createdClient, 
              profile: createdProfile || undefined 
            } as ClientWithProfile, 
            error: null 
          } as DbResponse<ClientWithProfile>;
        } catch (profileError) {
          console.error('Error creating client profile:', profileError);
          // Return just the client if profile creation fails
          return { 
            data: createdClient as ClientWithProfile, 
            error: null 
          } as DbResponse<ClientWithProfile>;
        }
      }

      // Return just the client if no profile was provided
      return { 
        data: createdClient as ClientWithProfile, 
        error: null 
      } as DbResponse<ClientWithProfile>;
    } catch (error) {
      console.error('Error creating client with profile:', error);
      return { data: null, error: error as Error };
    }
  }

  /**
   * Update a client with profile
   */
  async updateClientWithProfile(clientId: string, client: Partial<Client>, profile?: Partial<ClientProfile>) {
    try {
      // First get the current client data
      const { data: currentClient, error: getError } = await clientOperations.getClientById(clientId);
      
      if (getError) throw getError;
      if (!currentClient) throw new Error('Client not found');
      
      // Create a valid update object for the client
      const clientUpdate: Partial<DbClientInput> = {};
      if (client.first_name !== undefined) clientUpdate.first_name = client.first_name;
      if (client.last_name !== undefined) clientUpdate.last_name = client.last_name;
      if (client.email !== undefined) clientUpdate.email = client.email;
      if (client.phone !== undefined) clientUpdate.phone = client.phone;
      if (client.status !== undefined) clientUpdate.status = client.status as any;
      
      // Update client data
      const { data: updatedClient, error: clientError } = await clientOperations.updateClient(clientId, clientUpdate);

      if (clientError) throw clientError;

      // Update profile if provided
      let updatedProfile = null;
      if (profile) {
        try {
          // First get the profile ID
          const { data: profileData } = await clientProfileOperations.getClientProfileByClientId(clientId);
          
          if (profileData) {
            // Create a valid profile update object
            const profileUpdate: any = {};
            if (profile.date_of_birth) profileUpdate.date_of_birth = profile.date_of_birth;
            if (profile.address) profileUpdate.address = profile.address;
            if (profile.emergency_contact) profileUpdate.emergency_contact = profile.emergency_contact;
            if (profile.occupation) profileUpdate.occupation = profile.occupation;
            if (profile.therapy_type) profileUpdate.therapy_type = profile.therapy_type;
            
            // Update the profile
            const { data } = await clientProfileOperations.updateClientProfile(profileData.id, profileUpdate);
            updatedProfile = data;
          } else {
            // Create new profile if it doesn't exist
            const profileInput = {
              client_id: clientId,
              date_of_birth: profile.date_of_birth,
              address: profile.address,
              emergency_contact: profile.emergency_contact,
              occupation: profile.occupation,
              therapy_type: profile.therapy_type
              // Add other relevant profile fields here
            };
            const { data } = await clientProfileOperations.createClientProfile(profileInput as any);
            updatedProfile = data;
          }
        } catch (profileError) {
          console.error('Error updating client profile:', profileError);
          // Continue even without profile update
        }
      }

      return { 
        data: { 
          ...updatedClient, 
          ...client, 
          profile: updatedProfile || undefined 
        } as ClientWithProfile, 
        error: null 
      } as DbResponse<ClientWithProfile>;
    } catch (error) {
      console.error('Error updating client with profile:', error);
      return { data: null, error: error as Error };
    }
  }

  /**
   * Delete a client
   */
  async delete(clientId: string) {
    return this.deleteClient(clientId);
  }

  /**
   * Get all clients for a therapist
   */
  async getClients(therapistId: string) {
    try {
      // Use the db-operations function to get clients
      const { data, error } = await clientOperations.getClientsByTherapistId(therapistId);
      
      if (error) {
        // Handle missing table or other errors by using mock data
        if (error.message?.includes('does not exist') || (error as any).code === '42P01') {
          console.log('Using mock client data because database table does not exist');
          return { 
            data: mockClients.filter(client => client.therapist_id === therapistId || therapistId === 'current-user-id'), 
            error: null 
          } as DbResponse<Client[]>;
        }
        throw error;
      }

      return { data, error: null } as DbResponse<Client[]>;
    } catch (error) {
      console.error('Error fetching clients:', error);
      // Fall back to mock data for any error
      return { 
        data: mockClients.filter(client => client.therapist_id === therapistId || therapistId === 'current-user-id'), 
        error: null 
      } as DbResponse<Client[]>;
    }
  }

  /**
   * Get a client by ID
   */
  async getClientById(clientId: string) {
    try {
      // Use the db-operations function to get client by ID
      const { data, error } = await clientOperations.getClientById(clientId);
      
      if (error) {
        // Handle missing table by using mock data
        if (error.message?.includes('does not exist') || (error as any).code === '42P01') {
          console.log('Using mock client data because database table does not exist');
          // Find a mock client with matching ID
          const mockClient = mockClients.find(client => client.id === clientId);
          return { data: mockClient || null, error: null } as DbResponse<Client>;
        }
        throw error;
      }

      return { data, error: null } as DbResponse<Client>;
    } catch (error) {
      console.error('Error fetching client:', error);
      // Try to find matching mock client for fallback
      const mockClient = mockClients.find(client => client.id === clientId);
      return { data: mockClient || null, error: null } as DbResponse<Client>;
    }
  }

  /**
   * Get clients with their profile information
   */
  async getClientsWithProfiles(therapistId: string) {
    try {
      // Get clients from the db-operations layer
      const { data: clients, error: clientsError } = await clientOperations.getClientsByTherapistId(therapistId);

      // Check if there's an error or no clients found
      if (clientsError || !clients) {
        if (clientsError?.message?.includes('does not exist') || (clientsError as any)?.code === '42P01') {
          console.log('Using mock client data because database table does not exist');
          // Return mock data if the table doesn't exist
          return { 
            data: mockClients.filter(client => client.therapist_id === therapistId || therapistId === 'current-user-id'), 
            error: null 
          } as DbResponse<ClientWithProfile[]>;
        }
        // If other error, throw it to be caught below
        if (clientsError) throw clientsError;
      }

      // If we have clients, fetch their profiles
      const clientsWithProfiles: ClientWithProfile[] = [];

      // For each client, try to fetch their profile
      for (const client of clients || []) {
        const clientWithProfile: ClientWithProfile = {
          ...client,  
          profile: undefined  // Initialize with no profile
        };

        // Try to get the client's profile
        try {
          const { data: profileData } = await clientProfileOperations.getClientProfileByClientId(client.id);
          
          if (profileData) {
            clientWithProfile.profile = profileData as ClientProfile;
          }
          
        } catch (profileError) {
          console.error(`Error fetching profile for client ${client.id}:`, profileError);
          // Continue without profile data
        }

        clientsWithProfiles.push(clientWithProfile);
      }

      return { data: clientsWithProfiles, error: null } as DbResponse<ClientWithProfile[]>;
    } catch (error) {
      console.error('Error fetching clients with profiles:', error);
      
      // Fallback to mock data for any error
      console.log('Using mock client data due to error');
      return { 
        data: mockClients.filter(client => client.therapist_id === therapistId || therapistId === 'current-user-id'), 
        error: null 
      } as DbResponse<ClientWithProfile[]>;
    }
  }

  /**
   * Add a new client
   * This method now uses our service role client to bypass RLS policies as needed
   */
  async addClient(client: Partial<Client>, profile?: Partial<ClientProfile>) {
    try {
      console.log('ClientService.addClient called with service role support');
      
      // Verify we have the necessary client data
      if (!client.first_name || !client.last_name) {
        throw new Error('First name and last name are required');
      }

      // Get the current authenticated user
      const { data: authData } = await supabase.auth.getSession();
      if (!authData?.session?.user?.id) {
        throw new Error('Authentication required - you must be logged in');
      }
      
      const userId = authData.session.user.id;
      console.log('Current authenticated user:', userId);

      // Create the client with the user ID
      // Our updated db-operations layer will handle therapist creation and RLS bypass
      // via the service role client if needed
      const clientInput: DbClientInput = {
        therapist_id: client.therapist_id || '', // This will be overridden in the service layer
        first_name: client.first_name || '',
        last_name: client.last_name || '',
        email: client.email,
        phone: client.phone,
        status: (client.status as 'Active' | 'On Hold' | 'Completed' | 'New') || 'New'
      };

      // The createClient function will now:
      // 1. Find or create a therapist for the current user
      // 2. Use the service role client to bypass RLS
      // 3. Create the client with the correct therapist_id
      const { data: clientData, error: clientError } = await clientOperations.createClient(clientInput);

      if (clientError) {
        console.error('Client creation error in service layer:', clientError);
        throw clientError;
      }

      // If profile data is provided, create the profile
      if (profile && clientData) {
        try {
          // Create a proper profile input object
          const profileInput = {
            client_id: clientData.id,
            date_of_birth: profile.date_of_birth,
            address: profile.address,
            occupation: profile.occupation,
            emergency_contact: profile.emergency_contact,
            primary_concerns: profile.primary_concerns,
            therapy_type: profile.therapy_type,
            start_date: profile.start_date
          };
          
          // Create the profile using db-operations
          const { error: profileError } = await clientProfileOperations.createClientProfile(profileInput);

          if (profileError) {
            console.warn('Profile creation warning:', profileError);
            // Continue even if profile creation fails
          }
        } catch (profileError) {
          console.error('Error creating client profile:', profileError);
          // Continue even if profile creation fails
        }
      }

      return { data: clientData as Client, error: null } as DbResponse<Client>;
    } catch (error) {
      console.error('Error adding client:', error);
      return { data: null, error: error as Error };
    }
  }

  /**
   * Update a client
   */
  async updateClient(clientId: string, client: Partial<Client>, profile?: Partial<ClientProfile>) {
    try {
      // First get the current client data
      const { data: currentClient, error: getError } = await clientOperations.getClientById(clientId);
      
      if (getError) throw getError;
      if (!currentClient) throw new Error('Client not found');
      
      // Create a valid update object for the client
      const clientUpdate: Partial<DbClientInput> = {};
      if (client.first_name !== undefined) clientUpdate.first_name = client.first_name;
      if (client.last_name !== undefined) clientUpdate.last_name = client.last_name;
      if (client.email !== undefined) clientUpdate.email = client.email;
      if (client.phone !== undefined) clientUpdate.phone = client.phone;
      if (client.status !== undefined) clientUpdate.status = client.status as any;
      
      // Update client data
      const { data: updatedClient, error: clientError } = await clientOperations.updateClient(clientId, clientUpdate);

      if (clientError) throw clientError;

      // Update profile if provided
      if (profile) {
        try {
          // First get the profile ID
          const { data: profileData } = await clientProfileOperations.getClientProfileByClientId(clientId);
          
          if (profileData) {
            // Create a valid profile update object
            const profileUpdate: any = {};
            if (profile.date_of_birth) profileUpdate.date_of_birth = profile.date_of_birth;
            if (profile.address) profileUpdate.address = profile.address;
            if (profile.emergency_contact) profileUpdate.emergency_contact = profile.emergency_contact;
            if (profile.occupation) profileUpdate.occupation = profile.occupation;
            if (profile.therapy_type) profileUpdate.therapy_type = profile.therapy_type;
            if (profile.primary_concerns) profileUpdate.primary_concerns = profile.primary_concerns;
            if (profile.start_date) profileUpdate.start_date = profile.start_date;
            
            // Update the profile
            const { error: updateError } = await clientProfileOperations.updateClientProfile(profileData.id, profileUpdate);
            
            if (updateError) {
              console.warn('Profile update warning:', updateError);
              // Continue even if profile update fails
            }
          } else {
            // Create new profile if it doesn't exist
            const profileInput = {
              client_id: clientId,
              date_of_birth: profile.date_of_birth,
              address: profile.address,
              emergency_contact: profile.emergency_contact,
              occupation: profile.occupation,
              therapy_type: profile.therapy_type,
              primary_concerns: profile.primary_concerns,
              start_date: profile.start_date
            };
            
            const { error: createError } = await clientProfileOperations.createClientProfile(profileInput as any);
            
            if (createError) {
              console.warn('Profile creation warning:', createError);
              // Continue even if profile creation fails
            }
          }
        } catch (profileError) {
          console.error('Error updating client profile:', profileError);
          // Continue even without profile update
        }
      }

      return { 
        data: { ...updatedClient, ...client } as Client, 
        error: null 
      } as DbResponse<Client>;
    } catch (error) {
      console.error('Error updating client:', error);
      return { data: null, error: error as Error };
    }
  }

    if (clientError) throw clientError;

    // Update profile if provided
    if (profile) {
   */
  async deleteClient(clientId: string) {
    try {
      // First try to get the client profile to clean it up
      try {
        const { data: profileData } = await clientProfileOperations.getClientProfileByClientId(clientId);
        if (profileData) {
          await clientProfileOperations.deleteClientProfile(profileData.id);
        }
      } catch (profileError) {
        console.error('Error deleting client profile:', profileError);
        // Continue even if profile deletion fails
      }
      
      // Now delete the client using db-operations
      const { data, error } = await clientOperations.deleteClient(clientId);

      if (error) throw error;

      return { data: { id: clientId }, error: null } as DbResponse<{ id: string }>;
    } catch (error) {
      console.error('Error deleting client:', error);
      return { data: null, error: error as Error };
    }
  }
}
